#整个Springboot的项目，要想使用所有的bean,必须在启动类加上
#     @SpringBootApplication
#以及 @ComponentScan(basePackages={"com.XXX.*","",""})
#其实  有一个  com.alibaba.springboot2x.*  就够用了。
#但是  当你不需要 所有的包时，可以使用  basePackages={"","",""}  像一个数组

#改变端口，避免冲突
server.port=8083
#改变项目名  localhost:8083/springbootdemo/   是基础路径
server.servlet.context-path=/springbootdemo

#自定义属性
wly.name=王利勇
wly.pass=WLYwly51666

#thymeleaf   ---   是现代化的，服务器端的  java  模板引擎，语法更接近于HTML,它可实现 动静分离。
#动静分离：前端小姐姐，直接运行   是静态的效果。
#后端的小哥哥  浏览器路径访问     是动态的效果
#可以  热部署  ctrl+shift+F9  可以进行刷新
spring.thymeleaf.cache=false
spring.http.encoding.charset=UTF-8
spring.http.encoding.force=true
spring.http.encoding.enabled=true



#整合mybatis，记住 导入依赖时，必须要 事先做好配置，否则报错
#zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
#serverTimezone=UTC,这个一定要加上，否则报错，时区不对
#注意  dao层 一定要加上  @Mapper  注解，否则无法被Springboot管理
spring.datasource.url=jdbc:mysql://localhost:3306/chapter6?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456
# 注意注意  mapper的路径，在这里 路径一定要对，一定要正确。
# 其次  路径下的   xml文件，一定要加上 xml后缀，否则会报错
# 会  爆出一个 绑定错误，爆出语句异常。  UnInvilaed Statement
mybatis.mapper-locations=classpath:mybatis/*.xml
# 驼峰命名规范 如：数据库字段是  order_id 那么 实体字段就要写成 orderId
mybatis.configuration.map-underscore-to-camel-case=true
#允许 对 entity包的类，使用别名
mybatis.type-aliases-package=com.alibaba.springboot2x.mybatiszhenghe.entity


#swagger整合,可以方便前端工作人员，进行在线的文档阅读与调试。
#扫描的包路径
spring.swagger.base-package=com.alibaba.springboot2x.swaggerzhenghe
#是否启用 swagger
spring.swagger.enabled=true


#thymleaf与文件上传，整合。
# 禁用 thymeleaf 缓存
#前面已经定义了  spring.thymeleaf.cache=false
# 是否支持批量上传   (默认值 true)
spring.servlet.multipart.enabled=true
# 上传文件的临时目录 （一般情况下不用特意修改）
spring.servlet.multipart.location=
# 上传文件最大为 1M （默认值 1M 根据自身业务自行控制即可）,这里为10M
spring.servlet.multipart.max-file-size=1048576
# 上传请求最大为 10M（默认值10M 根据自身业务自行控制即可）
spring.servlet.multipart.max-request-size=10485760
# 文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值0 一般情况下不用特意修改）
spring.servlet.multipart.file-size-threshold=0
# 判断是否要延迟解析文件（相当于懒加载，一般情况下不用特意修改）
spring.servlet.multipart.resolve-lazily=false
